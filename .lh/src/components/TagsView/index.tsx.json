{
    "sourceFile": "src/components/TagsView/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1742032883390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742032908375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,11 +148,14 @@\n     />\r\n   );\r\n \r\n   // 自定义标签\r\n-  const renderTabBar: any = (props: any, DefaultTabBar: any) => (\r\n+  const renderTabBar = (\r\n+    props: unknown,\r\n+    DefaultTabBar: React.ComponentType<unknown>\r\n+  ) => (\r\n     <DefaultTabBar {...props}>\r\n-      {(node: any) => (\r\n+      {(node: React.ReactNode) => (\r\n         <div className=\"ant-tabs-tab\" style={{ marginRight: 0 }}>\r\n           {node}\r\n         </div>\r\n       )}\r\n"
                },
                {
                    "date": 1742032916093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Button, Dropdown, Menu, Space, Tabs, Tooltip } from \"antd\";\r\n-import { CloseOutlined, DownOutlined } from \"@ant-design/icons\";\r\n import { useCallback, useEffect, useState } from \"react\";\r\n import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n+import { DownOutlined } from \"@ant-design/icons\";\r\n import React from \"react\";\r\n \r\n export interface TagItem {\r\n   key: string;\r\n"
                },
                {
                    "date": 1742032940348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n import { DownOutlined } from \"@ant-design/icons\";\r\n import React from \"react\";\r\n+import type { TabsProps } from \"antd\";\r\n \r\n export interface TagItem {\r\n   key: string;\r\n   label: string;\r\n"
                },
                {
                    "date": 1742032966348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n import { DownOutlined } from \"@ant-design/icons\";\r\n import React from \"react\";\r\n-import type { TabsProps } from \"antd\";\r\n \r\n export interface TagItem {\r\n   key: string;\r\n   label: string;\r\n@@ -148,22 +147,8 @@\n       ]}\r\n     />\r\n   );\r\n \r\n-  // 自定义标签\r\n-  const renderTabBar = (\r\n-    props: unknown,\r\n-    DefaultTabBar: React.ComponentType<unknown>\r\n-  ) => (\r\n-    <DefaultTabBar {...props}>\r\n-      {(node: React.ReactNode) => (\r\n-        <div className=\"ant-tabs-tab\" style={{ marginRight: 0 }}>\r\n-          {node}\r\n-        </div>\r\n-      )}\r\n-    </DefaultTabBar>\r\n-  );\r\n-\r\n   return (\r\n     <div\r\n       className=\"tags-view-container\"\r\n       style={{\r\n@@ -178,9 +163,8 @@\n         type=\"editable-card\"\r\n         onChange={onChange}\r\n         activeKey={activeKey}\r\n         onEdit={onEdit}\r\n-        renderTabBar={renderTabBar}\r\n         items={items.map((item) => ({\r\n           key: item.path,\r\n           label: (\r\n             <Tooltip title={item.label}>\r\n"
                },
                {
                    "date": 1742033772341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n import { DownOutlined } from \"@ant-design/icons\";\r\n import React from \"react\";\r\n+import { getRouteMetaByPath } from \"../../router\";\r\n \r\n export interface TagItem {\r\n   key: string;\r\n   label: string;\r\n@@ -32,49 +33,23 @@\n \r\n     // 检查标签是否已存在\r\n     const isExist = items.some((item) => item.path === pathname);\r\n     if (!isExist) {\r\n-      // 根据路径获取标签名称\r\n-      let label = \"\";\r\n-      switch (pathname) {\r\n-        case \"/\":\r\n-          label = \"Dashboard\";\r\n-          break;\r\n-        case \"/documentation\":\r\n-          label = \"Documentation\";\r\n-          break;\r\n-        case \"/guide\":\r\n-          label = \"Guide\";\r\n-          break;\r\n-        case \"/permission\":\r\n-          label = \"Permission\";\r\n-          break;\r\n-        case \"/route-permission\":\r\n-          label = \"Route Permission\";\r\n-          break;\r\n-        case \"/component\":\r\n-          label = \"Component\";\r\n-          break;\r\n-        case \"/business\":\r\n-          label = \"Business\";\r\n-          break;\r\n-        case \"/404\":\r\n-          label = \"404\";\r\n-          break;\r\n-        default:\r\n-          label = pathname.split(\"/\").pop() || \"Unknown\";\r\n+      // 根据路径获取路由元数据\r\n+      const meta = getRouteMetaByPath(pathname);\r\n+\r\n+      // 如果找到元数据并且不是隐藏的路由，则添加标签\r\n+      if (meta && !meta.hidden) {\r\n+        setItems((prevItems) => [\r\n+          ...prevItems,\r\n+          {\r\n+            key: pathname,\r\n+            label: meta.title,\r\n+            path: pathname,\r\n+            closable: pathname !== \"/\",\r\n+          },\r\n+        ]);\r\n       }\r\n-\r\n-      // 添加新标签\r\n-      setItems((prevItems) => [\r\n-        ...prevItems,\r\n-        {\r\n-          key: pathname,\r\n-          label,\r\n-          path: pathname,\r\n-          closable: pathname !== \"/\",\r\n-        },\r\n-      ]);\r\n     }\r\n   }, [location, items]);\r\n \r\n   // 切换标签\r\n"
                }
            ],
            "date": 1742032883390,
            "name": "Commit-0",
            "content": "import { Button, Dropdown, Menu, Space, Tabs, Tooltip } from \"antd\";\r\nimport { CloseOutlined, DownOutlined } from \"@ant-design/icons\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nimport React from \"react\";\r\n\r\nexport interface TagItem {\r\n  key: string;\r\n  label: string;\r\n  path: string;\r\n  closable: boolean;\r\n}\r\n\r\nconst TagsView: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [activeKey, setActiveKey] = useState<string>(location.pathname);\r\n  const [items, setItems] = useState<TagItem[]>([\r\n    {\r\n      key: \"/\",\r\n      label: \"Dashboard\",\r\n      path: \"/\",\r\n      closable: false,\r\n    },\r\n  ]);\r\n\r\n  // 根据路由变化更新标签\r\n  useEffect(() => {\r\n    const { pathname } = location;\r\n    setActiveKey(pathname);\r\n\r\n    // 检查标签是否已存在\r\n    const isExist = items.some((item) => item.path === pathname);\r\n    if (!isExist) {\r\n      // 根据路径获取标签名称\r\n      let label = \"\";\r\n      switch (pathname) {\r\n        case \"/\":\r\n          label = \"Dashboard\";\r\n          break;\r\n        case \"/documentation\":\r\n          label = \"Documentation\";\r\n          break;\r\n        case \"/guide\":\r\n          label = \"Guide\";\r\n          break;\r\n        case \"/permission\":\r\n          label = \"Permission\";\r\n          break;\r\n        case \"/route-permission\":\r\n          label = \"Route Permission\";\r\n          break;\r\n        case \"/component\":\r\n          label = \"Component\";\r\n          break;\r\n        case \"/business\":\r\n          label = \"Business\";\r\n          break;\r\n        case \"/404\":\r\n          label = \"404\";\r\n          break;\r\n        default:\r\n          label = pathname.split(\"/\").pop() || \"Unknown\";\r\n      }\r\n\r\n      // 添加新标签\r\n      setItems((prevItems) => [\r\n        ...prevItems,\r\n        {\r\n          key: pathname,\r\n          label,\r\n          path: pathname,\r\n          closable: pathname !== \"/\",\r\n        },\r\n      ]);\r\n    }\r\n  }, [location, items]);\r\n\r\n  // 切换标签\r\n  const onChange = (key: string) => {\r\n    setActiveKey(key);\r\n    navigate(key);\r\n  };\r\n\r\n  // 关闭标签\r\n  const onEdit = (\r\n    targetKey: React.MouseEvent | React.KeyboardEvent | string,\r\n    action: \"add\" | \"remove\"\r\n  ) => {\r\n    if (action === \"remove\") {\r\n      const targetPath = targetKey as string;\r\n      const newItems = items.filter((item) => item.path !== targetPath);\r\n      setItems(newItems);\r\n\r\n      // 如果关闭的是当前活动标签，则跳转到最后一个标签\r\n      if (targetPath === activeKey) {\r\n        const lastItem = newItems[newItems.length - 1];\r\n        setActiveKey(lastItem.path);\r\n        navigate(lastItem.path);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 关闭当前标签\r\n  const closeCurrent = useCallback(() => {\r\n    if (activeKey === \"/\") return; // 不关闭首页\r\n    onEdit(activeKey, \"remove\");\r\n  }, [activeKey]);\r\n\r\n  // 关闭其他标签\r\n  const closeOthers = useCallback(() => {\r\n    const newItems = items.filter(\r\n      (item) => item.path === \"/\" || item.path === activeKey\r\n    );\r\n    setItems(newItems);\r\n  }, [activeKey, items]);\r\n\r\n  // 关闭所有标签\r\n  const closeAll = useCallback(() => {\r\n    const newItems = items.filter((item) => item.path === \"/\");\r\n    setItems(newItems);\r\n    setActiveKey(\"/\");\r\n    navigate(\"/\");\r\n  }, [items, navigate]);\r\n\r\n  // 右键菜单\r\n  const menu = (\r\n    <Menu\r\n      items={[\r\n        {\r\n          key: \"close-current\",\r\n          label: \"Close Current\",\r\n          onClick: closeCurrent,\r\n          disabled: activeKey === \"/\",\r\n        },\r\n        {\r\n          key: \"close-others\",\r\n          label: \"Close Others\",\r\n          onClick: closeOthers,\r\n        },\r\n        {\r\n          key: \"close-all\",\r\n          label: \"Close All\",\r\n          onClick: closeAll,\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n\r\n  // 自定义标签\r\n  const renderTabBar: any = (props: any, DefaultTabBar: any) => (\r\n    <DefaultTabBar {...props}>\r\n      {(node: any) => (\r\n        <div className=\"ant-tabs-tab\" style={{ marginRight: 0 }}>\r\n          {node}\r\n        </div>\r\n      )}\r\n    </DefaultTabBar>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"tags-view-container\"\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#fff\",\r\n        padding: \"0 16px\",\r\n        borderBottom: \"1px solid #f0f0f0\",\r\n      }}\r\n    >\r\n      <Tabs\r\n        type=\"editable-card\"\r\n        onChange={onChange}\r\n        activeKey={activeKey}\r\n        onEdit={onEdit}\r\n        renderTabBar={renderTabBar}\r\n        items={items.map((item) => ({\r\n          key: item.path,\r\n          label: (\r\n            <Tooltip title={item.label}>\r\n              <span>{item.label}</span>\r\n            </Tooltip>\r\n          ),\r\n          closable: item.closable,\r\n        }))}\r\n        style={{ flex: 1, marginBottom: 0 }}\r\n      />\r\n      <Dropdown overlay={menu} trigger={[\"click\"]}>\r\n        <Button type=\"text\" size=\"small\">\r\n          <Space>\r\n            操作\r\n            <DownOutlined />\r\n          </Space>\r\n        </Button>\r\n      </Dropdown>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagsView;\r\n"
        }
    ]
}