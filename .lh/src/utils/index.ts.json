{
    "sourceFile": "src/utils/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1742018638892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1742018638892,
            "name": "Commit-0",
            "content": "/**\r\n * 格式化日期\r\n * @param date 日期对象或时间戳\r\n * @param format 格式化模板，默认 'YYYY-MM-DD HH:mm:ss'\r\n * @returns 格式化后的日期字符串\r\n */\r\nexport const formatDate = (\r\n  date: Date | number | string,\r\n  format = \"YYYY-MM-DD HH:mm:ss\"\r\n): string => {\r\n  const d = new Date(date);\r\n\r\n  const year = d.getFullYear().toString();\r\n  const month = (d.getMonth() + 1).toString().padStart(2, \"0\");\r\n  const day = d.getDate().toString().padStart(2, \"0\");\r\n  const hours = d.getHours().toString().padStart(2, \"0\");\r\n  const minutes = d.getMinutes().toString().padStart(2, \"0\");\r\n  const seconds = d.getSeconds().toString().padStart(2, \"0\");\r\n\r\n  return format\r\n    .replace(\"YYYY\", year)\r\n    .replace(\"MM\", month)\r\n    .replace(\"DD\", day)\r\n    .replace(\"HH\", hours)\r\n    .replace(\"mm\", minutes)\r\n    .replace(\"ss\", seconds);\r\n};\r\n\r\n/**\r\n * 格式化金额\r\n * @param amount 金额数值\r\n * @param decimals 小数位数，默认 2\r\n * @param separator 千位分隔符，默认 ','\r\n * @returns 格式化后的金额字符串\r\n */\r\nexport const formatAmount = (\r\n  amount: number,\r\n  decimals = 2,\r\n  separator = \",\"\r\n): string => {\r\n  return amount.toFixed(decimals).replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\r\n};\r\n\r\n/**\r\n * 生成随机 ID\r\n * @param length ID 长度，默认 8\r\n * @returns 随机 ID 字符串\r\n */\r\nexport const generateId = (length = 8): string => {\r\n  const chars =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  let result = \"\";\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * 深拷贝对象\r\n * @param obj 要拷贝的对象\r\n * @returns 拷贝后的新对象\r\n */\r\nexport const deepClone = <T>(obj: T): T => {\r\n  if (obj === null || typeof obj !== \"object\") {\r\n    return obj;\r\n  }\r\n\r\n  if (obj instanceof Date) {\r\n    return new Date(obj.getTime()) as unknown as T;\r\n  }\r\n\r\n  if (obj instanceof Array) {\r\n    return obj.map((item) => deepClone(item)) as unknown as T;\r\n  }\r\n\r\n  if (obj instanceof Object) {\r\n    const copy = {} as Record<string, unknown>;\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n      copy[key] = deepClone((obj as Record<string, unknown>)[key]);\r\n    });\r\n\r\n    return copy as T;\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * 防抖函数\r\n * @param fn 要执行的函数\r\n * @param delay 延迟时间，默认 300ms\r\n * @returns 防抖处理后的函数\r\n */\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  fn: T,\r\n  delay = 300\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timer: NodeJS.Timeout | null = null;\r\n\r\n  return function (...args: Parameters<T>) {\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n    }\r\n\r\n    timer = setTimeout(() => {\r\n      fn(...args);\r\n      timer = null;\r\n    }, delay);\r\n  };\r\n};\r\n\r\n/**\r\n * 节流函数\r\n * @param fn 要执行的函数\r\n * @param delay 延迟时间，默认 300ms\r\n * @returns 节流处理后的函数\r\n */\r\nexport const throttle = <T extends (...args: any[]) => any>(\r\n  fn: T,\r\n  delay = 300\r\n): ((...args: Parameters<T>) => void) => {\r\n  let lastCall = 0;\r\n\r\n  return function (...args: Parameters<T>) {\r\n    const now = Date.now();\r\n\r\n    if (now - lastCall >= delay) {\r\n      fn(...args);\r\n      lastCall = now;\r\n    }\r\n  };\r\n};\r\n"
        }
    ]
}