{
    "sourceFile": "src/services/request.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1742126801998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742126823694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n // src/services/request.ts\r\n \r\n-import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n+import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\n \r\n-import axiosRetry from 'axios-retry';\r\n-import { message } from 'antd';\r\n+import axiosRetry from \"axios-retry\";\r\n+import { message } from \"antd\";\r\n \r\n // 定义请求配置类型\r\n interface RequestConfig extends AxiosRequestConfig {\r\n   url: string;\r\n-  method?: 'get' | 'post' | 'put' | 'delete';\r\n+  method?: \"get\" | \"post\" | \"put\" | \"delete\";\r\n   params?: Record<string, any>;\r\n   data?: Record<string, any>;\r\n }\r\n \r\n@@ -22,9 +22,9 @@\n \r\n // 创建 Axios 实例\r\n const createApiInstance = () => {\r\n   const instance = axios.create({\r\n-    baseURL: 'https://jsonplaceholder.typicode.com', // 使用示例 API\r\n+    baseURL: \"https://jsonplaceholder.typicode.com\", // 使用示例 API\r\n     timeout: 10000,\r\n   });\r\n \r\n   // 配置重试策略\r\n@@ -33,9 +33,9 @@\n     retryDelay: (retryCount) => retryCount * 1000,\r\n     retryCondition: (error) => {\r\n       return (\r\n         axios.isAxiosError(error) &&\r\n-        (error.code === 'ECONNABORTED' || error.response?.status >= 500)\r\n+        (error.code === \"ECONNABORTED\" || error.response?.status >= 500)\r\n       );\r\n     },\r\n   });\r\n \r\n@@ -60,29 +60,50 @@\n };\r\n \r\n // 获取错误信息的辅助函数\r\n const getErrorMessage = (error: unknown): string => {\r\n-  let message = '未知错误';\r\n+  let message = \"未知错误\";\r\n   if (axios.isAxiosError(error)) {\r\n     switch (error.response?.status) {\r\n-      case 400: message = '请求错误'; break;\r\n-      case 401: message = '未授权，请登录'; break;\r\n-      case 403: message = '拒绝访问'; break;\r\n-      case 404: message = `请求地址出错: ${error.response.config.url}`; break;\r\n-      case 408: message = '请求超时'; break;\r\n-      case 500: message = '服务器内部错误'; break;\r\n-      case 502: message = '网关错误'; break;\r\n-      case 503: message = '服务不可用'; break;\r\n-      case 504: message = '网关超时'; break;\r\n-      default: message = '网络请求失败';\r\n+      case 400:\r\n+        message = \"请求错误\";\r\n+        break;\r\n+      case 401:\r\n+        message = \"未授权，请登录\";\r\n+        break;\r\n+      case 403:\r\n+        message = \"拒绝访问\";\r\n+        break;\r\n+      case 404:\r\n+        message = `请求地址出错: ${error.response.config.url}`;\r\n+        break;\r\n+      case 408:\r\n+        message = \"请求超时\";\r\n+        break;\r\n+      case 500:\r\n+        message = \"服务器内部错误\";\r\n+        break;\r\n+      case 502:\r\n+        message = \"网关错误\";\r\n+        break;\r\n+      case 503:\r\n+        message = \"服务不可用\";\r\n+        break;\r\n+      case 504:\r\n+        message = \"网关超时\";\r\n+        break;\r\n+      default:\r\n+        message = \"网络请求失败\";\r\n     }\r\n   }\r\n   return message;\r\n };\r\n \r\n // 核心请求函数\r\n export const request = async <T>(config: RequestConfig): Promise<T> => {\r\n-  const requestKey = `${config.method || 'get'}-${config.url}-${JSON.stringify(config.params || {})}-${JSON.stringify(config.data || {})}`;\r\n+  const requestKey = `${config.method || \"get\"}-${config.url}-${JSON.stringify(\r\n+    config.params || {}\r\n+  )}-${JSON.stringify(config.data || {})}`;\r\n \r\n   // 防重复请求\r\n   if (pendingRequests.has(requestKey)) {\r\n     return pendingRequests.get(requestKey) as Promise<T>;\r\n@@ -95,20 +116,20 @@\n   const requestPromise = api(config)\r\n     .then((response: AxiosResponse<ApiResponse<T>>) => response.data.data || {})\r\n     .catch((error: unknown) => {\r\n       if (axios.isCancel(error)) {\r\n-        throw new Error('请求已取消');\r\n+        throw new Error(\"请求已取消\");\r\n       }\r\n \r\n       if (axios.isAxiosError(error)) {\r\n         const status = error.response?.status;\r\n         const messageText = getErrorMessage(error);\r\n \r\n         if (status === 401) {\r\n-          showErrorMessage('未授权，请登录');\r\n+          showErrorMessage(\"未授权，请登录\");\r\n           throw error;\r\n         } else if (status === 403) {\r\n-          showErrorMessage('无权限访问');\r\n+          showErrorMessage(\"无权限访问\");\r\n           throw error;\r\n         } else {\r\n           showErrorMessage(messageText);\r\n           throw error;\r\n@@ -126,14 +147,14 @@\n };\r\n \r\n // 封装常用方法\r\n export const get = <T>(url: string, params?: Record<string, any>) =>\r\n-  request<T>({ method: 'get', url, params });\r\n+  request<T>({ method: \"get\", url, params });\r\n \r\n export const post = <T>(url: string, data?: Record<string, any>) =>\r\n-  request<T>({ method: 'post', url, data });\r\n+  request<T>({ method: \"post\", url, data });\r\n \r\n export const put = <T>(url: string, data?: Record<string, any>) =>\r\n-  request<T>({ method: 'put', url, data });\r\n+  request<T>({ method: \"put\", url, data });\r\n\\ No newline at end of file\n \r\n export const del = <T>(url: string, params?: Record<string, any>) =>\r\n-  request<T>({ method: 'delete', url, params });\n+  request<T>({ method: \"delete\", url, params });\r\n"
                },
                {
                    "date": 1742126952252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n };\r\n \r\n const api = createApiInstance();\r\n \r\n-// 请求去重 Map\r\n+// 请求去重 Map，使用更精确的类型定义\r\n const pendingRequests = new Map<string, Promise<any>>();\r\n \r\n // 全局错误提示防抖\r\n let lastMessageTime = 0;\r\n@@ -60,43 +60,47 @@\n };\r\n \r\n // 获取错误信息的辅助函数\r\n const getErrorMessage = (error: unknown): string => {\r\n-  let message = \"未知错误\";\r\n+  let errorMessage = \"未知错误\";\r\n   if (axios.isAxiosError(error)) {\r\n-    switch (error.response?.status) {\r\n+    // 添加空值检查\r\n+    const status = error.response?.status;\r\n+    const url = error.response?.config?.url || '未知URL';\r\n+\r\n+    switch (status) {\r\n       case 400:\r\n-        message = \"请求错误\";\r\n+        errorMessage = \"请求错误\";\r\n         break;\r\n       case 401:\r\n-        message = \"未授权，请登录\";\r\n+        errorMessage = \"未授权，请登录\";\r\n         break;\r\n       case 403:\r\n-        message = \"拒绝访问\";\r\n+        errorMessage = \"拒绝访问\";\r\n         break;\r\n       case 404:\r\n-        message = `请求地址出错: ${error.response.config.url}`;\r\n+        errorMessage = `请求地址出错: ${url}`;\r\n         break;\r\n       case 408:\r\n-        message = \"请求超时\";\r\n+        errorMessage = \"请求超时\";\r\n         break;\r\n       case 500:\r\n-        message = \"服务器内部错误\";\r\n+        errorMessage = \"服务器内部错误\";\r\n         break;\r\n       case 502:\r\n-        message = \"网关错误\";\r\n+        errorMessage = \"网关错误\";\r\n         break;\r\n       case 503:\r\n-        message = \"服务不可用\";\r\n+        errorMessage = \"服务不可用\";\r\n         break;\r\n       case 504:\r\n-        message = \"网关超时\";\r\n+        errorMessage = \"网关超时\";\r\n         break;\r\n       default:\r\n-        message = \"网络请求失败\";\r\n+        errorMessage = \"网络请求失败\";\r\n     }\r\n   }\r\n-  return message;\r\n+  return errorMessage;\r\n };\r\n \r\n // 核心请求函数\r\n export const request = async <T>(config: RequestConfig): Promise<T> => {\r\n@@ -113,9 +117,13 @@\n   const controller = new AbortController();\r\n   config.signal = controller.signal;\r\n \r\n   const requestPromise = api(config)\r\n-    .then((response: AxiosResponse<ApiResponse<T>>) => response.data.data || {})\r\n+    .then((response: AxiosResponse<ApiResponse<T>>) => {\r\n+      // 确保返回类型正确\r\n+      const responseData = response.data.data;\r\n+      return responseData as T;\r\n+    })\r\n     .catch((error: unknown) => {\r\n       if (axios.isCancel(error)) {\r\n         throw new Error(\"请求已取消\");\r\n       }\r\n@@ -146,15 +154,15 @@\n   return requestPromise;\r\n };\r\n \r\n // 封装常用方法\r\n-export const get = <T>(url: string, params?: Record<string, any>) =>\r\n+export const get = <T>(url: string, params?: Record<string, any>): Promise<T> =>\r\n   request<T>({ method: \"get\", url, params });\r\n \r\n-export const post = <T>(url: string, data?: Record<string, any>) =>\r\n+export const post = <T>(url: string, data?: Record<string, any>): Promise<T> =>\r\n   request<T>({ method: \"post\", url, data });\r\n \r\n-export const put = <T>(url: string, data?: Record<string, any>) =>\r\n+export const put = <T>(url: string, data?: Record<string, any>): Promise<T> =>\r\n   request<T>({ method: \"put\", url, data });\r\n \r\n-export const del = <T>(url: string, params?: Record<string, any>) =>\r\n+export const del = <T>(url: string, params?: Record<string, any>): Promise<T> =>\r\n   request<T>({ method: \"delete\", url, params });\r\n"
                },
                {
                    "date": 1742126977834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,22 @@\n // src/services/request.ts\r\n \r\n-import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\n+import type { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\n \r\n+import axios from \"axios\";\r\n import axiosRetry from \"axios-retry\";\r\n import { message } from \"antd\";\r\n \r\n // 定义请求配置类型\r\n interface RequestConfig extends AxiosRequestConfig {\r\n   url: string;\r\n   method?: \"get\" | \"post\" | \"put\" | \"delete\";\r\n-  params?: Record<string, any>;\r\n-  data?: Record<string, any>;\r\n+  params?: Record<string, unknown>;\r\n+  data?: Record<string, unknown>;\r\n }\r\n \r\n // 定义响应数据类型\r\n-interface ApiResponse<T = any> {\r\n+interface ApiResponse<T = unknown> {\r\n   data: T;\r\n   code?: number;\r\n   message?: string;\r\n }\r\n@@ -44,9 +45,9 @@\n \r\n const api = createApiInstance();\r\n \r\n // 请求去重 Map，使用更精确的类型定义\r\n-const pendingRequests = new Map<string, Promise<any>>();\r\n+const pendingRequests = new Map<string, Promise<unknown>>();\r\n \r\n // 全局错误提示防抖\r\n let lastMessageTime = 0;\r\n const MESSAGE_DEBOUNCE_TIME = 2000;\r\n@@ -64,10 +65,10 @@\n   let errorMessage = \"未知错误\";\r\n   if (axios.isAxiosError(error)) {\r\n     // 添加空值检查\r\n     const status = error.response?.status;\r\n-    const url = error.response?.config?.url || \"未知URL\";\r\n-\r\n+    const url = error.response?.config?.url || '未知URL';\r\n+    \r\n     switch (status) {\r\n       case 400:\r\n         errorMessage = \"请求错误\";\r\n         break;\r\n@@ -154,15 +155,15 @@\n   return requestPromise;\r\n };\r\n \r\n // 封装常用方法\r\n-export const get = <T>(url: string, params?: Record<string, any>): Promise<T> =>\r\n+export const get = <T>(url: string, params?: Record<string, unknown>): Promise<T> =>\r\n   request<T>({ method: \"get\", url, params });\r\n \r\n-export const post = <T>(url: string, data?: Record<string, any>): Promise<T> =>\r\n+export const post = <T>(url: string, data?: Record<string, unknown>): Promise<T> =>\r\n   request<T>({ method: \"post\", url, data });\r\n \r\n-export const put = <T>(url: string, data?: Record<string, any>): Promise<T> =>\r\n+export const put = <T>(url: string, data?: Record<string, unknown>): Promise<T> =>\r\n   request<T>({ method: \"put\", url, data });\r\n \r\n-export const del = <T>(url: string, params?: Record<string, any>): Promise<T> =>\r\n+export const del = <T>(url: string, params?: Record<string, unknown>): Promise<T> =>\r\n   request<T>({ method: \"delete\", url, params });\r\n"
                },
                {
                    "date": 1742127005759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,20 @@\n // src/services/request.ts\r\n \r\n-import type { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\n+import type { AxiosError, AxiosInstance, CancelTokenSource } from \"axios\";\r\n \r\n import axios from \"axios\";\r\n import axiosRetry from \"axios-retry\";\r\n import { message } from \"antd\";\r\n \r\n // 定义请求配置类型\r\n-interface RequestConfig extends AxiosRequestConfig {\r\n+interface RequestConfig {\r\n   url: string;\r\n   method?: \"get\" | \"post\" | \"put\" | \"delete\";\r\n   params?: Record<string, unknown>;\r\n   data?: Record<string, unknown>;\r\n+  signal?: AbortSignal;\r\n+  [key: string]: unknown;\r\n }\r\n \r\n // 定义响应数据类型\r\n interface ApiResponse<T = unknown> {\r\n@@ -21,9 +23,9 @@\n   message?: string;\r\n }\r\n \r\n // 创建 Axios 实例\r\n-const createApiInstance = () => {\r\n+const createApiInstance = (): AxiosInstance => {\r\n   const instance = axios.create({\r\n     baseURL: \"https://jsonplaceholder.typicode.com\", // 使用示例 API\r\n     timeout: 10000,\r\n   });\r\n@@ -32,12 +34,10 @@\n   axiosRetry(instance, {\r\n     retries: 3,\r\n     retryDelay: (retryCount) => retryCount * 1000,\r\n     retryCondition: (error) => {\r\n-      return (\r\n-        axios.isAxiosError(error) &&\r\n-        (error.code === \"ECONNABORTED\" || error.response?.status >= 500)\r\n-      );\r\n+      if (!error.response) return false;\r\n+      return error.response.status >= 500;\r\n     },\r\n   });\r\n \r\n   return instance;\r\n@@ -62,13 +62,14 @@\n \r\n // 获取错误信息的辅助函数\r\n const getErrorMessage = (error: unknown): string => {\r\n   let errorMessage = \"未知错误\";\r\n-  if (axios.isAxiosError(error)) {\r\n-    // 添加空值检查\r\n-    const status = error.response?.status;\r\n-    const url = error.response?.config?.url || \"未知URL\";\r\n-\r\n+  \r\n+  if (error && typeof error === 'object' && 'response' in error) {\r\n+    const axiosError = error as AxiosError;\r\n+    const status = axiosError.response?.status;\r\n+    const url = axiosError.response?.config?.url || '未知URL';\r\n+    \r\n     switch (status) {\r\n       case 400:\r\n         errorMessage = \"请求错误\";\r\n         break;\r\n@@ -99,11 +100,22 @@\n       default:\r\n         errorMessage = \"网络请求失败\";\r\n     }\r\n   }\r\n+  \r\n   return errorMessage;\r\n };\r\n \r\n+// 检查是否为 Axios 错误\r\n+const isAxiosError = (error: unknown): error is AxiosError => {\r\n+  return axios.isAxiosError(error);\r\n+};\r\n+\r\n+// 检查是否为取消请求\r\n+const isRequestCanceled = (error: unknown): boolean => {\r\n+  return axios.isCancel(error);\r\n+};\r\n+\r\n // 核心请求函数\r\n export const request = async <T>(config: RequestConfig): Promise<T> => {\r\n   const requestKey = `${config.method || \"get\"}-${config.url}-${JSON.stringify(\r\n     config.params || {}\r\n@@ -118,19 +130,19 @@\n   const controller = new AbortController();\r\n   config.signal = controller.signal;\r\n \r\n   const requestPromise = api(config)\r\n-    .then((response: AxiosResponse<ApiResponse<T>>) => {\r\n+    .then((response) => {\r\n       // 确保返回类型正确\r\n       const responseData = response.data.data;\r\n       return responseData as T;\r\n     })\r\n     .catch((error: unknown) => {\r\n-      if (axios.isCancel(error)) {\r\n+      if (isRequestCanceled(error)) {\r\n         throw new Error(\"请求已取消\");\r\n       }\r\n \r\n-      if (axios.isAxiosError(error)) {\r\n+      if (isAxiosError(error)) {\r\n         const status = error.response?.status;\r\n         const messageText = getErrorMessage(error);\r\n \r\n         if (status === 401) {\r\n@@ -155,23 +167,15 @@\n   return requestPromise;\r\n };\r\n \r\n // 封装常用方法\r\n-export const get = <T>(\r\n-  url: string,\r\n-  params?: Record<string, unknown>\r\n-): Promise<T> => request<T>({ method: \"get\", url, params });\r\n+export const get = <T>(url: string, params?: Record<string, unknown>): Promise<T> =>\r\n+  request<T>({ method: \"get\", url, params });\r\n \r\n-export const post = <T>(\r\n-  url: string,\r\n-  data?: Record<string, unknown>\r\n-): Promise<T> => request<T>({ method: \"post\", url, data });\r\n+export const post = <T>(url: string, data?: Record<string, unknown>): Promise<T> =>\r\n+  request<T>({ method: \"post\", url, data });\r\n \r\n-export const put = <T>(\r\n-  url: string,\r\n-  data?: Record<string, unknown>\r\n-): Promise<T> => request<T>({ method: \"put\", url, data });\r\n+export const put = <T>(url: string, data?: Record<string, unknown>): Promise<T> =>\r\n+  request<T>({ method: \"put\", url, data });\r\n \r\n-export const del = <T>(\r\n-  url: string,\r\n-  params?: Record<string, unknown>\r\n-): Promise<T> => request<T>({ method: \"delete\", url, params });\r\n+export const del = <T>(url: string, params?: Record<string, unknown>): Promise<T> =>\r\n+  request<T>({ method: \"delete\", url, params });\r\n"
                }
            ],
            "date": 1742126801998,
            "name": "Commit-0",
            "content": "// src/services/request.ts\r\n\r\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\nimport axiosRetry from 'axios-retry';\r\nimport { message } from 'antd';\r\n\r\n// 定义请求配置类型\r\ninterface RequestConfig extends AxiosRequestConfig {\r\n  url: string;\r\n  method?: 'get' | 'post' | 'put' | 'delete';\r\n  params?: Record<string, any>;\r\n  data?: Record<string, any>;\r\n}\r\n\r\n// 定义响应数据类型\r\ninterface ApiResponse<T = any> {\r\n  data: T;\r\n  code?: number;\r\n  message?: string;\r\n}\r\n\r\n// 创建 Axios 实例\r\nconst createApiInstance = () => {\r\n  const instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com', // 使用示例 API\r\n    timeout: 10000,\r\n  });\r\n\r\n  // 配置重试策略\r\n  axiosRetry(instance, {\r\n    retries: 3,\r\n    retryDelay: (retryCount) => retryCount * 1000,\r\n    retryCondition: (error) => {\r\n      return (\r\n        axios.isAxiosError(error) &&\r\n        (error.code === 'ECONNABORTED' || error.response?.status >= 500)\r\n      );\r\n    },\r\n  });\r\n\r\n  return instance;\r\n};\r\n\r\nconst api = createApiInstance();\r\n\r\n// 请求去重 Map\r\nconst pendingRequests = new Map<string, Promise<any>>();\r\n\r\n// 全局错误提示防抖\r\nlet lastMessageTime = 0;\r\nconst MESSAGE_DEBOUNCE_TIME = 2000;\r\n\r\nconst showErrorMessage = (content: string) => {\r\n  const now = Date.now();\r\n  if (now - lastMessageTime > MESSAGE_DEBOUNCE_TIME) {\r\n    message.error(content);\r\n    lastMessageTime = now;\r\n  }\r\n};\r\n\r\n// 获取错误信息的辅助函数\r\nconst getErrorMessage = (error: unknown): string => {\r\n  let message = '未知错误';\r\n  if (axios.isAxiosError(error)) {\r\n    switch (error.response?.status) {\r\n      case 400: message = '请求错误'; break;\r\n      case 401: message = '未授权，请登录'; break;\r\n      case 403: message = '拒绝访问'; break;\r\n      case 404: message = `请求地址出错: ${error.response.config.url}`; break;\r\n      case 408: message = '请求超时'; break;\r\n      case 500: message = '服务器内部错误'; break;\r\n      case 502: message = '网关错误'; break;\r\n      case 503: message = '服务不可用'; break;\r\n      case 504: message = '网关超时'; break;\r\n      default: message = '网络请求失败';\r\n    }\r\n  }\r\n  return message;\r\n};\r\n\r\n// 核心请求函数\r\nexport const request = async <T>(config: RequestConfig): Promise<T> => {\r\n  const requestKey = `${config.method || 'get'}-${config.url}-${JSON.stringify(config.params || {})}-${JSON.stringify(config.data || {})}`;\r\n\r\n  // 防重复请求\r\n  if (pendingRequests.has(requestKey)) {\r\n    return pendingRequests.get(requestKey) as Promise<T>;\r\n  }\r\n\r\n  // 创建 AbortController\r\n  const controller = new AbortController();\r\n  config.signal = controller.signal;\r\n\r\n  const requestPromise = api(config)\r\n    .then((response: AxiosResponse<ApiResponse<T>>) => response.data.data || {})\r\n    .catch((error: unknown) => {\r\n      if (axios.isCancel(error)) {\r\n        throw new Error('请求已取消');\r\n      }\r\n\r\n      if (axios.isAxiosError(error)) {\r\n        const status = error.response?.status;\r\n        const messageText = getErrorMessage(error);\r\n\r\n        if (status === 401) {\r\n          showErrorMessage('未授权，请登录');\r\n          throw error;\r\n        } else if (status === 403) {\r\n          showErrorMessage('无权限访问');\r\n          throw error;\r\n        } else {\r\n          showErrorMessage(messageText);\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      throw error;\r\n    })\r\n    .finally(() => {\r\n      pendingRequests.delete(requestKey);\r\n    });\r\n\r\n  pendingRequests.set(requestKey, requestPromise);\r\n  return requestPromise;\r\n};\r\n\r\n// 封装常用方法\r\nexport const get = <T>(url: string, params?: Record<string, any>) =>\r\n  request<T>({ method: 'get', url, params });\r\n\r\nexport const post = <T>(url: string, data?: Record<string, any>) =>\r\n  request<T>({ method: 'post', url, data });\r\n\r\nexport const put = <T>(url: string, data?: Record<string, any>) =>\r\n  request<T>({ method: 'put', url, data });\r\n\r\nexport const del = <T>(url: string, params?: Record<string, any>) =>\r\n  request<T>({ method: 'delete', url, params });"
        }
    ]
}